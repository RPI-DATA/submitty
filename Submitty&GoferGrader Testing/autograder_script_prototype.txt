Gofer Grader Script

** Before following the procedure, please activate the Carme environment using the 'activate' file found in the 'bin' directory when you installed the environment**

Step 1: Formatting a correct directory
The following is the sample prototype for the correct autograding directory. The important directories here are a "notebooks" directory that contains the python files being tested, the "tests" files that contain the doctest python files, and the "scripts" directory, where the .ipynb files will be converted to .py files upon calling the following command in the terminal(you must be in the directory where the .ipynb files are located):

```
carme convert
```

If the folder is not formatted this way, you may not be able to convert the .ipynb files and may have to resort to the Jupyter conversion procedure (Assuming you are in the Anaconda Prompt):

```
jupyter nbconvert --to script your_notebook_name.ipynb
```

OR

```
jupyter nbconvert --to python your_notebook_name.ipynb
```

autograder
└── berk
    ├── code
    │   ├── notebooks
    │   │   ├── error.jpg
    │   │   ├── lab01_copy.ipynb
    │   │   ├── lab01.ipynb
    │   │   ├── lab01.ok
    │   │   ├── license.md
    │   │   ├── map.jpg
    │   │   ├── numberline_0.png
    │   │   ├── numberline_1.png
    │   │   ├── readme.md
    │   │   └── tests
    │   │       ├── __init__.py
    │   │       ├── q32.py
    │   │       ├── q331.py
    │   │       ├── q332.py
    │   │       ├── q411.py
    │   │       ├── q421.py
    │   │       ├── q511.py
    │   │       └── q51.py
    │   └── scripts
    │       ├── lab01_copy.py
    │       └── lab01.py
    ├── data
    │   └── readme.md
    ├── docs
    │   ├── lab01_copy.md
    │   ├── lab01.md
    │   └── rst
    │       ├── lab01_copy.rst
    │       └── lab01.rst
    └── README.md

Step 2: Running Python files on the command line and recording the output
When you are running Python files on the command line in Linux (e.g. Windows Subsystem Linux (wsl)), the command usually is in the following formats:

```
python3 python_file.py      #Using Python 3
```

OR

```
python python_file.py       #Using Python 2 (or prior)
```

Now, we want to record the output of these tests in a separate external file, should they be print statements or doctests. We can do the following command:

```
python3 python_file.py > output.txt       #Using Python 3
```

OR

```
python python_file.py > output.txt        #Using Python 2 (or prior)
```

Now we would have a output.txt file that has the output from running the Python file.
